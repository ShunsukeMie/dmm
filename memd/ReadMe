============== -*- outline -*- ==============

                    memd

2018/02/07  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
=============================================

====================
* memd とは？
====================

	Linux Kernel のモジュールとして組み込むことで
	ユーザーランドから Kernel 内部のメモリやレジスタを覗くツール
	元は Renesas BSP チームの横山さんが作成していたもの

====================
* 使い方の例
====================

	例）アドレス 0xec700060 から 1 バイト分を 8bit で表示

		> echo r 0xec700060 > /proc/reg

	例）アドレス 0xec700060 に 0x00010000 を書き込み

		> echo wd 0xec700060 0x00010000 > /proc/reg

	例）アドレス 0xec700060 から 16bit でダンプ(デフォルトでは 0x80 バイト分)

		> echo mw 0xec700060 > /proc/reg

	例）アドレス 0xec700060 から 0x10 バイト分を指定して 32bit でダンプ

		> echo md 0xec700060 0x10 > /proc/reg

	例）何bit単位でアクセスするかを指定

		 8 bit: r  / w  / m
		16 bit: rw / ww / mw
		32 bit: rd / wd / md

====================
* ラッパースクリプト
====================

	memdをdmmと同じオプションで使えるようにするためのスクリプト
	使用する際は、using_scriptオプションを有効にしてモジュールをロードする

		> insmod memd.ko using_script

	詳しい使い方はヘルプを参照

		> ./memd.py help

====================
* コンパイル方法
====================

	sample.config を .config にコピーして、中に有る KPATH に Linux Kernel を書き、
	コンパイルします

		> cp sample.config .config
		> vi .config
		> make

	クロスコンパイルの場合は、カーネルコンパイル時と同様のオプションが必要

		> ARCH=arm64 CROSS_COMPILE="aarch64-linux-gnu-" make

	その後、memd.ko をコピー

		> cp memd.ko ${PATH}

====================
* FAQ
====================

**	Q. make すると asm/types.h が無いとか言われるけど？

	--------------
	CC memd.ko
	In file included from ${LINUX}/include/linux/types.h:6:0,
	                 from ${LINUX}/include/linux/list.h:5,
	                 from ${LINUX}/include/linux/module.h:9,
	                 from dmm/memd/memd.c:8:
	${LINUX}/include/uapi/linux/types.h:5:23: fatal error: asm/types.h: そのようなファイルやディレクトリはありません
	--------------

	A. クロスコンパイル用に使用した設定忘れてない？

	「コンパイル方法」参照
