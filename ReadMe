============== -*- outline -*- ==============

                   ReadMe
2008/09  morimoto
=============================================

* dmm とは

	スペル自体にはあまり意味はないけど，Memory Management for Development みたいな感じ
	mmap を使用してメモリを覗いたり変更するので root 権限で使用しないといけない
	アーキテクチャの違いを吸収できるようにしたので，それなりに便利に使えるかも

* コンパイル方法

	普通のコンパイルの場合，メモリダンプとメモリエディットができる程度
	アーキテクチャ依存のコマンドを使いたい場合は以下を参照

	SH アーキテクチャ
	> make sh[34]

** スタティックリンクしたい場合

	EXTR=-static make

* 命名規則

	実装に関して以下の命名規則に従う事

	o グローバル変数，スタティック変数，グローバル関数，関数定義の引数はアプリケーションハンガリアン記法を用いる
	o ローカル関数名，ローカル変数はアンダーバー区切り記法を用いる（Linux 見たいなやつ）
	o システム関連の関数（絶対に必要な初期化など）は _sys で始まる関数名にする

	アプリケーションハンガリアン記法は以下のルールにしたがう
	# アプリケーションハンガリアンと言っているが，一部システムハンガリアンも含まれる
	# これが最も良い命名法かどうかは分からない（要修正　要チェック）

	rpData		論理座標 (Relative Position)
	apData		絶対座標 (Absolute Position)
	ixData		配列インデックス
	idData		ID (enum などで定義されているはず）
	ccData		cached Data
	dfData		2つの数の差 (diff)
	pData		ポインタ
	rData		参照する元 (const されているべき？)
	tData		代入する先
	isData		状態 (bool で使用？)
	sData		安全な (safe)
	usData		安全でない (安全にする処理が必要)
	strData		文字列
	tblData		テーブル
	nData		何かの個数など（本来は cData とすべきだが，伝統的にこうした）

	g_Data		グローバル変数
	s_Data		ローカル変数

	stDATA		struct の typedef
	fnData		関数ポインタ

* コーディングルール

	* システム系関数は _sys で始まる名前にする
	* ( xxx ) の用に前後に空白を入れる
	* if や for などでは 1 行だけなら {} はつけない
